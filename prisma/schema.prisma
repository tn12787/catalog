datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filterJson"]
}

enum ReleaseType {
  Single
  EP
  Album
}

enum CloudProvider {
  GSUITE
  OFFICE_365
}

enum TaskStatus {
  OUTSTANDING
  IN_PROGRESS
  COMPLETE
}

enum ReleaseTaskType {
  MASTERING
  ARTWORK
  DISTRIBUTION
  MUSIC_VIDEO
  MARKETING
}

enum TaskEventType {
  CREATE_TASK
  NEW_COMMENT
  UPDATE_COMMENT
  DELETE_COMMENT
  UPDATE_ASSIGNEES
  UPDATE_STATUS
  UPDATE_DATE
}

model Team {
  id                   String        @id @default(cuid())
  name                 String
  imageUrl             String?
  provider             CloudProvider
  members              TeamMember[]
  artists              Artist[]
  contacts             Contact[]
  releases             Release[]
  invites              Invite[]
  stripeCustomerId     String        @unique
  stripeSubscriptionId String?       @unique
}

model TeamMember {
  id            String             @id @default(cuid())
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  team          Team               @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId        String
  teamId        String
  roles         Role[]
  tasksAssigned ReleaseTask[]
  actionsTaken  ReleaseTaskEvent[]
  notifications Notification[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([userId, teamId])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  teams         TeamMember[]
}

model Invite {
  id        String    @id @default(cuid())
  email     String
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  role      Role      @relation(fields: [roleId], references: [id], onDelete: SetNull)
  roleId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([email, teamId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Artist {
  id           String    @id @default(cuid())
  name         String
  legalName    String?
  spotifyUrl   String?
  instagramUrl String?
  team         Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId       String
  releases     Release[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@unique([name, teamId])
}

model Release {
  id         String      @id @default(cuid())
  name       String
  artist     Artist      @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId   String
  type       ReleaseType
  targetDate DateTime
  team       Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?   @updatedAt

  tasks ReleaseTask[]
  @@unique([name, artistId, teamId])
}

model Contact {
  id     String  @id @default(cuid())
  name   String
  email  String?
  phone  String?
  team   Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String

  createdAt DateTime      @default(now())
  updatedAt DateTime?     @updatedAt
  tasks     ReleaseTask[]
}

model ReleaseTask {
  id               String             @id @default(cuid())
  notes            String?
  calendarEventId  String?            @unique
  dueDate          DateTime? //TODO: make this required
  status           TaskStatus
  type             ReleaseTaskType
  release          Release            @relation(fields: [releaseId], references: [id], onDelete: Cascade)
  releaseId        String
  assignees        TeamMember[]
  completedBy      Contact?           @relation(fields: [completedById], references: [id])
  completedById    String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime?          @updatedAt
  artworkData      ArtworkData?
  distributionData DistributionData?
  marketingData    MarketingData?
  musicVideoData   MusicVideoData?
  masteringData    MasteringData?
  events           ReleaseTaskEvent[]
  notifications    Notification[]

  @@unique([releaseId, type])
}

model ArtworkData {
  id     String      @id @default(cuid())
  url    String?     @unique
  task   ReleaseTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String

  @@unique([taskId])
}

model DistributionData {
  id            String      @id @default(cuid())
  distributor   Distributor @relation(fields: [distributorId], references: [id])
  distributorId String
  task          ReleaseTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId        String

  @@unique([taskId])
}

model MarketingData {
  id     String          @id @default(cuid())
  links  MarketingLink[]
  task   ReleaseTask     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String

  @@unique([taskId])
}

model MusicVideoData {
  id     String      @id @default(cuid())
  url    String?     @unique
  task   ReleaseTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String

  @@unique([taskId])
}

model MasteringData {
  id     String      @id @default(cuid())
  url    String?     @unique
  task   ReleaseTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String

  @@unique([taskId])
}

model ReleaseTaskEvent {
  id        String        @id @default(cuid())
  type      TaskEventType
  task      ReleaseTask   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  user      TeamMember    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String
  extraData Json
  timestamp DateTime      @default(now())
}

model Distributor {
  id        String             @id @default(cuid())
  name      String             @unique
  siteUrl   String?            @unique
  usedFor   DistributionData[]
  createdAt DateTime           @default(now())
  updatedAt DateTime?          @updatedAt

  @@unique([name, siteUrl])
}

model MarketingLink {
  id            String        @id @default(cuid())
  url           String
  name          String
  marketingTask MarketingData @relation(fields: [marketingId], references: [id], onDelete: Cascade)
  marketingId   String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?     @updatedAt
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  permissions Permission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  users       TeamMember[]
  Invite      Invite[]
}

model Permission {
  id        String    @id @default(cuid())
  name      String    @unique
  roles     Role[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

enum NotificationType {
  TASK_DUE_IN_48_HOURS
  TASK_DUE_TODAY
  TASK_OVERDUE
}

model Notification {
  id           String           @id @default(cuid())
  type         NotificationType
  teamMember   TeamMember       @relation(fields: [teamMemberId], references: [id], onDelete: Cascade)
  teamMemberId String
  read         Boolean          @default(false)
  task         ReleaseTask?     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId       String
  extraData    Json
  createdAt    DateTime         @default(now())

  @@unique([teamMemberId, taskId, type])
}
