datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["selectRelationCount", "referentialActions"]
}

enum Role {
  VIEW
  EDIT
  ADMIN
}

enum ReleaseType {
  Single
  EP
  Album
}

enum CloudProvider {
  GSUITE
  OFFICE_365
}

enum TaskStatus {
  OUTSTANDING
  IN_PROGRESS
  COMPLETE
}

enum ReleaseTaskType {
  MASTERING
  ARTWORK
  DISTRIBUTION
  MUSIC_VIDEO
}

model Team {
  id       String        @id @default(cuid())
  name     String
  provider CloudProvider
  users    TeamUser[]
  artists  Artist[]
  contacts Contact[]
  releases Release[]
  invites  Invite[]
}

model TeamUser {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId String
  teamId String
  role   Role   @default(VIEW)

  @@unique([userId, teamId])
}

model Invite {
  id        String   @id @default(cuid())
  email     String   @unique
  accepted  Boolean
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  createdAt DateTime @default(now())
}

model User {
  id                    String         @id @default(cuid())
  email                 String         @unique
  name                  String
  emailVerified         Boolean?       @default(false)
  image                 String?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  accounts              Account[]
  sessions              Session[]
  teams                 TeamUser[]
  artworksAssigned      Artwork[]
  distributionsAssigned Distribution[]
  marketingAssigned     Marketing[]
  musicVideosAssigned   MusicVideo[]
  masteringAssigned     Mastering[]
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, providerAccountId])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Artist {
  id           String    @id @default(cuid())
  name         String
  legalName    String?
  spotifyUrl   String?
  instagramUrl String?
  team         Team      @relation(fields: [managedBy], references: [id], onDelete: Cascade)
  managedBy    String
  releases     Release[]
}

model Release {
  id           String        @id @default(cuid())
  name         String
  artist       Artist        @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId     String
  type         ReleaseType
  targetDate   DateTime
  team         Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  artwork      Artwork?
  distribution Distribution?
  marketing    Marketing?
  musicVideo   MusicVideo?
  mastering    Mastering?

  @@unique([name, artistId, teamId])
}

model Contact {
  id                String         @id @default(cuid())
  name              String
  email             String?
  phone             String?
  team              Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId            String
  artworkTasks      Artwork[]
  distributionTasks Distribution[]
  marketingTasks    Marketing[]
  musicVideos       MusicVideo[]
  masteringTasks    Mastering[]
}

model Artwork {
  id              String     @id @default(cuid())
  url             String?    @unique
  notes           String?
  calendarEventId String?    @unique
  dueDate         DateTime
  status          TaskStatus
  release         Release    @relation(fields: [releaseId], references: [id], onDelete: Cascade)
  releaseId       String
  assignee        User?      @relation(fields: [assigneeId], references: [id])
  assigneeId      String?
  completedBy     Contact?   @relation(fields: [completedById], references: [id])
  completedById   String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@unique([releaseId])
}

model Distribution {
  id              String      @id @default(cuid())
  distributor     Distributor @relation(fields: [distributorId], references: [id])
  distributorId   String
  notes           String?
  calendarEventId String?     @unique
  dueDate         DateTime
  status          TaskStatus
  release         Release     @relation(fields: [releaseId], references: [id], onDelete: Cascade)
  releaseId       String
  assignee        User?       @relation(fields: [assigneeId], references: [id])
  assigneeId      String?
  completedBy     Contact?    @relation(fields: [completedById], references: [id])
  completedById   String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@unique([releaseId])
}

model Distributor {
  id           String         @id @default(cuid())
  name         String
  siteUrl      String?
  Distribution Distribution[]
}

model Marketing {
  id              String          @id @default(cuid())
  links           MarketingLink[]
  notes           String?
  calendarEventId String?         @unique
  dueDate         DateTime
  status          TaskStatus
  release         Release         @relation(fields: [releaseId], references: [id], onDelete: Cascade)
  releaseId       String
  assignee        User?           @relation(fields: [assigneeId], references: [id])
  assigneeId      String?
  completedBy     Contact?        @relation(fields: [completedById], references: [id])
  completedById   String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@unique([releaseId])
}

model MarketingLink {
  id            String    @id @default(cuid())
  url           String
  name          String
  marketingTask Marketing @relation(fields: [marketingId], references: [id], onDelete: Cascade)
  marketingId   String
}

model MusicVideo {
  id              String     @id @default(cuid())
  url             String?    @unique
  notes           String?
  calendarEventId String?    @unique
  dueDate         DateTime
  status          TaskStatus
  release         Release    @relation(fields: [releaseId], references: [id], onDelete: Cascade)
  releaseId       String
  assignee        User?      @relation(fields: [assigneeId], references: [id])
  assigneeId      String?
  completedBy     Contact?   @relation(fields: [completedById], references: [id])
  completedById   String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@unique([releaseId])
}

model Mastering {
  id              String     @id @default(cuid())
  url             String?    @unique
  notes           String?
  calendarEventId String?    @unique
  dueDate         DateTime
  status          TaskStatus
  release         Release    @relation(fields: [releaseId], references: [id], onDelete: Cascade)
  releaseId       String
  assignee        User?      @relation(fields: [assigneeId], references: [id])
  assigneeId      String?
  completedBy     Contact?   @relation(fields: [completedById], references: [id])
  completedById   String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@unique([releaseId])
}
