datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filterJson"]
}

enum ReleaseType {
  Single
  EP
  Album
}

enum CloudProvider {
  GSUITE
  OFFICE_365
}

enum TaskStatus {
  OUTSTANDING
  IN_PROGRESS
  COMPLETE
}

enum ReleaseTaskType {
  MASTERING
  ARTWORK
  DISTRIBUTION
  MUSIC_VIDEO
  MARKETING
}

enum TaskEventType {
  CREATE_TASK
  NEW_COMMENT
  UPDATE_COMMENT
  DELETE_COMMENT
  UPDATE_ASSIGNEES
  UPDATE_STATUS
  UPDATE_DATE
}

enum UserOnboardingSegment {
  INDIVIDUAL_ARTIST
  ARTIST_MANAGER
  LABEL_MANAGER
  LABEL_EMPLOYEE
  MARKETING_COORDINATOR
  PUBLICIST
  SOCIAL_MEDIA_MANAGER
}

model Workspace {
  id                   String            @id @default(cuid())
  name                 String
  imageUrl             String?
  provider             CloudProvider
  members              WorkspaceMember[]
  artists              Artist[]
  contacts             Contact[]
  contactLabels        ContactLabel[]
  releases             Release[]
  invites              Invite[]
  stripeCustomerId     String?           @unique
  stripeSubscriptionId String?           @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model WorkspaceMember {
  id                     String             @id @default(cuid())
  user                   User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace              Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId                 String
  workspaceId            String
  roles                  Role[]
  tasksAssigned          ReleaseTask[]
  actionsTaken           ReleaseTaskEvent[]
  notifications          Notification[]     @relation("for")
  notificationsTriggered Notification[]     @relation("by")

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([userId, workspaceId])
}

model User {
  id            String                 @id @default(cuid())
  name          String?
  email         String?                @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  workspaces    WorkspaceMember[]
  segment       UserOnboardingSegment?
}

model Invite {
  id          String    @id @default(cuid())
  email       String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  role        Role      @relation(fields: [roleId], references: [id], onDelete: SetNull)
  roleId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  @@unique([email, workspaceId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Artist {
  id           String    @id @default(cuid())
  name         String
  legalName    String?
  spotifyUrl   String?
  instagramUrl String?
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId  String
  releases     Release[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@unique([name, workspaceId])
}

model Release {
  id          String      @id @default(cuid())
  name        String
  artist      Artist      @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId    String
  type        ReleaseType
  targetDate  DateTime
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt

  tasks ReleaseTask[]
  @@unique([name, artistId, workspaceId])
}

model Contact {
  id          String         @id @default(cuid())
  name        String
  email       String?
  phone       String?
  website     String?
  workspace   Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  tasks       ReleaseTask[]
  labels      ContactLabel[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([name, workspaceId])
}

model ContactLabel {
  id          String     @id @default(cuid())
  name        String
  workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  color       String?
  contacts    Contact[]

  @@unique([name, workspaceId])
}

model ReleaseTask {
  id               String             @id @default(cuid())
  notes            String?
  calendarEventId  String?            @unique
  dueDate          DateTime? //TODO: make this required
  status           TaskStatus
  type             ReleaseTaskType
  release          Release            @relation(fields: [releaseId], references: [id], onDelete: Cascade)
  releaseId        String
  assignees        WorkspaceMember[]
  contacts         Contact[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime?          @updatedAt
  artworkData      ArtworkData?
  distributionData DistributionData?
  marketingData    MarketingData?
  musicVideoData   MusicVideoData?
  masteringData    MasteringData?
  events           ReleaseTaskEvent[]
  notifications    Notification[]

  @@unique([releaseId, type])
}

model ArtworkData {
  id     String      @id @default(cuid())
  url    String?     @unique
  task   ReleaseTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String

  @@unique([taskId])
}

model DistributionData {
  id            String      @id @default(cuid())
  distributor   Distributor @relation(fields: [distributorId], references: [id])
  distributorId String
  task          ReleaseTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId        String

  @@unique([taskId])
}

model MarketingData {
  id     String          @id @default(cuid())
  links  MarketingLink[]
  task   ReleaseTask     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String

  @@unique([taskId])
}

model MusicVideoData {
  id     String      @id @default(cuid())
  url    String?     @unique
  task   ReleaseTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String

  @@unique([taskId])
}

model MasteringData {
  id     String      @id @default(cuid())
  url    String?     @unique
  task   ReleaseTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String

  @@unique([taskId])
}

model ReleaseTaskEvent {
  id        String          @id @default(cuid())
  type      TaskEventType
  task      ReleaseTask     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  user      WorkspaceMember @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String
  extraData Json
  timestamp DateTime        @default(now())
}

model Distributor {
  id        String             @id @default(cuid())
  name      String             @unique
  siteUrl   String?            @unique
  usedFor   DistributionData[]
  createdAt DateTime           @default(now())
  updatedAt DateTime?          @updatedAt

  @@unique([name, siteUrl])
}

model MarketingLink {
  id            String        @id @default(cuid())
  url           String
  name          String
  marketingTask MarketingData @relation(fields: [marketingId], references: [id], onDelete: Cascade)
  marketingId   String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?     @updatedAt
}

model Role {
  id          String            @id @default(cuid())
  name        String            @unique
  description String?
  permissions Permission[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime?         @updatedAt
  users       WorkspaceMember[]
  Invite      Invite[]
}

model Permission {
  id        String    @id @default(cuid())
  name      String    @unique
  roles     Role[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

enum NotificationType {
  TASK_DUE_IN_48_HOURS
  TASK_DUE_TODAY
  TASK_OVERDUE
  TASK_COMMENT
  TASK_ASSIGNED
}

model Notification {
  id                String           @id @default(cuid())
  type              NotificationType
  workspaceMember   WorkspaceMember  @relation(name: "for", fields: [workspaceMemberId], references: [id], onDelete: Cascade)
  workspaceMemberId String
  actor             WorkspaceMember? @relation(name: "by", fields: [actorId], references: [id], onDelete: Cascade)
  actorId           String?
  read              Boolean          @default(false)
  task              ReleaseTask?     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId            String
  extraData         Json
  createdAt         DateTime         @default(now())
}
